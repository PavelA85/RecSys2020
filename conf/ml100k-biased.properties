data.path=datasets/ml100k/
data.threshold=4
results.path=results/biased/ml100k-
crossvalidation.nfolds=5
evaluation.cutoff=10
# rnd, gender, default:NONE
fill.mode=rnd
sampler.mode=rnd
targetselection.targetsizes=0,1,2,5,10,20,50,100,200,500,1000,1682

algorithms.run.all=false

# Params for running the whole set of algorithms 
# (regardless full or test configuration)
algorithms.knn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000

algorithms.normknn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000
algorithms.normknn.min=3

algorithms.imf.k=5,10,20,30,50
algorithms.imf.lambda=0.1,0.5,1,2,3,5,10
algorithms.imf.alpha=1,5,10,15,50,100

# Full parameter configuration
algorithms.full.knn.k=50

algorithms.full.normknn.k=10
algorithms.full.normknn.min=3

algorithms.full.imf.k=10
algorithms.full.imf.lambda=0.1
algorithms.full.imf.alpha=1
#full:1682
#[['Normalized kNN (k=10, min=3)' 0.13002286001023178]]
#[['iMF (k=10, lambda=1.0, alpha=1.0)' 0.219984666107567]]
#[['kNN (k=50)' 0.19867025711023326]]

#Test parameter configuration
algorithms.test.knn.k=60

algorithms.test.normknn.k=400
algorithms.test.normknn.min=3

algorithms.test.imf.k=5
algorithms.test.imf.lambda=10
algorithms.test.imf.alpha=100
#test:
#[['Normalized kNN (k=400, min=3)' 0.535936222992479]]
#[['iMF (k=5, lambda=10.0, alpha=100.0)' 0.5407137240312809]]
#[['kNN (k=60)' 0.5288403835396631]]


#test:
#[['Normalized kNN (k=400, min=3)' 0.535936222992479]]
#[['iMF (k=5, lambda=1.0, alpha=100.0)' 0.5411941106487316]]
#[['kNN (k=60)' 0.5288403835396631]]
#full:1682
#[['Normalized kNN (k=10, min=3)' 0.1300228600102318]]
#[['iMF (k=10, lambda=10.0, alpha=1.0)' 0.22064261237416147]]
#[['kNN (k=50)' 0.19867025711023326]]