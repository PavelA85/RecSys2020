data.path=datasets/ml100k/old/
data.threshold=4
results.path=results/biased/ml100k-old-
crossvalidation.nfolds=5
evaluation.cutoff=10
# rnd, gender, default:NONE
fill.mode=rnd
sampler.mode=rnd
targetselection.targetsizes=0,1,2,5,10,20,50,100,200,500,1042

algorithms.run.all=false

# Params for running the whole set of algorithms 
# (regardless full or test configuration)
algorithms.knn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000

algorithms.normknn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000
algorithms.normknn.min=3

algorithms.imf.k=5,10,50
algorithms.imf.lambda=0.1,1,10
algorithms.imf.alpha=1,10,100

# Full parameter configuration
#kNN (k=20)' 0.16846153846153844]]
algorithms.full.knn.k=20

#Normalized kNN (k=10, min=3)' 0.1196153846153846]]
algorithms.full.normknn.k=10
algorithms.full.normknn.min=3

#iMF (k=50, lambda=10.0, alpha=1.0)' 0.16846153846153844]]
algorithms.full.imf.k=50
algorithms.full.imf.lambda=10
algorithms.full.imf.alpha=1

#Test parameter configuration
#kNN (k=50)' 0.5384615384615384]]
algorithms.test.knn.k=50

#Normalized kNN (k=60, min=3)' 0.5269230769230768]]
algorithms.test.normknn.k=60
algorithms.test.normknn.min=3

#iMF (k=5, lambda=1.0, alpha=1.0)' 0.533076923076923]]
algorithms.test.imf.k=5
algorithms.test.imf.lambda=1
algorithms.test.imf.alpha=1
