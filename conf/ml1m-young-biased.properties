data.path=datasets/ml1m/young/
data.threshold=4
results.path=results/biased/ml1m-young-
crossvalidation.nfolds=5
evaluation.cutoff=10
# rnd, gender, default:NONE
fill.mode=rnd
targetselection.targetsizes=0,1,2,5,10,20,50,100,200,500,1000,2000,2650

algorithms.run.all=false

# Params for running the whole set of algorithms 
# (regardless full or test configuration)
algorithms.knn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000

algorithms.normknn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000
algorithms.normknn.min=3

algorithms.imf.k=5,10,50
algorithms.imf.lambda=0.1,1,10
algorithms.imf.alpha=1,10,100

# Full parameter configuration
#kNN (k=30)' 0.1807207207207207]]
algorithms.full.knn.k=30

#Normalized kNN (k=10, min=3)' 0.09297297297297294]]
algorithms.full.normknn.k=10
algorithms.full.normknn.min=3

#iMF (k=10, lambda=10.0, alpha=1.0)' 0.2015315315315315]]
algorithms.full.imf.k=10
algorithms.full.imf.lambda=10
algorithms.full.imf.alpha=1

#Test parameter configuration
#kNN (k=30)' 0.6077477477477478]]
algorithms.test.knn.k=30

#Normalized kNN (k=80, min=3)' 0.6144144144144144]]
algorithms.test.normknn.k=80
algorithms.test.normknn.min=3

#iMF (k=5, lambda=10.0, alpha=100.0)' 0.6138738738738738]]
algorithms.test.imf.k=5
algorithms.test.imf.lambda=10
algorithms.test.imf.alpha=100
