data.path=datasets/ml1m/
data.threshold=4
results.path=results/biased/ml1m-
crossvalidation.nfolds=5
evaluation.cutoff=10
# rnd, gender, default:NONE
fill.mode=rnd
sampler.mode=rnd
targetselection.targetsizes=0,1,2,5,10,20,50,100,200,500,1000,2000,3706

algorithms.run.all=false

# Params for running the whole set of algorithms 
# (regardless full or test configuration)
algorithms.knn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000

algorithms.normknn.k=10,20,30,40,50,60,70,80,90,100,200,300,400,500,600,700,800,900,1000,2000,3000,4000,5000,6000
algorithms.normknn.min=3

#algorithms.imf.k=5,10,20,30,50
#algorithms.imf.lambda=0.1,0.5,1,2,3,5,10
#algorithms.imf.alpha=1,5,10,15,50,100
algorithms.imf.k=5,10,50
algorithms.imf.lambda=0.1,1,10
algorithms.imf.alpha=1,10,100

# Full parameter configuration
algorithms.full.knn.k=40

algorithms.full.normknn.k=10
algorithms.full.normknn.min=3

algorithms.full.imf.k=50
algorithms.full.imf.lambda=10
algorithms.full.imf.alpha=1
#[['Normalized kNN (k=10, min=3)' 0.11139100403309617]]
#[['iMF (k=50, lambda=10.0, alpha=1.0)' 0.20273344556124667]]
#[['kNN (k=40)' 0.17730604441116196]]

#Test parameter configuration
algorithms.test.knn.k=90

algorithms.test.normknn.k=400
algorithms.test.normknn.min=3

algorithms.test.imf.k=10
algorithms.test.imf.lambda=1
algorithms.test.imf.alpha=100
#[['Normalized kNN (k=400, min=3)' 0.5397980530910262]]
#[['iMF (k=10, lambda=1.0, alpha=100.0)' 0.5458707531710495]]
#[['kNN (k=90)' 0.528672240799095]]